import math

""" PROBLEM 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
"""

import math

class BaseSolution():
    def __init__(self):
        self.setup()

    def setup(self):
        print("setup input and memory...")

    def solve(self):
        print("solving...")

class BruteSolution(BaseSolution):
    """ Solve problem using brute force approach
    """

    def solve(self):
        #for each number in triangle sequences, find how many divisor they have
        #keep going but stop if any reach beyond 500 divisors'
        current = 10000
        while True:
            current_triangle = current*(current+1)//2
            n_divisors = self._count_divisors_simple(current_triangle)
            if n_divisors>=500:
                return current, current_triangle
            current+=1
            
    def _count_divisors_simple(self, n):
        if n<2:
            return 1
        count = 2
        sqrt_n = int(math.sqrt(n))
        for i in range(2, sqrt_n+1):
            if n%i==0:
                if n//i == i:
                    count+=1
                else:
                    count+=2
        return count



